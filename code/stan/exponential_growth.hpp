
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace exponential_growth_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 13, column 4 to column 24)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 14, column 4 to column 24)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 15, column 4 to column 21)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 20, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 20, column 4 to column 62)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 23, column 4 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 24, column 4 to column 31)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 25, column 4 to column 26)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 28, column 4 to column 32)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 3, column 4 to column 19)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 4, column 4 to column 19)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 5, column 30 to column 31)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 5, column 4 to column 33)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 8, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 8, column 4 to column 19)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 9, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 9, column 4 to column 22)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 14, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/growth_curve_troubleshooting/code/stan/exponential_growth.stan', line 15, column 11 to column 12)"};



class exponential_growth_model final : public model_base_crtp<exponential_growth_model> {

 private:
  int N;
  int J;
  std::vector<int> idx;
  Eigen::Matrix<double, -1, 1> time;
  Eigen::Matrix<double, -1, 1> density;
 
 public:
  ~exponential_growth_model() final { }
  
  std::string model_name() const final { return "exponential_growth_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  exponential_growth_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "exponential_growth_model_namespace::exponential_growth_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 11;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 11;
      current_statement__ = 11;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 12;
      validate_non_negative_index("idx", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","idx","int",
          context__.to_vec(N));
      idx = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 13;
      assign(idx, nil_index_list(), context__.vals_i("idx"),
        "assigning variable idx");
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "idx[sym1__]", idx[(sym1__ - 1)],
                               1);}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_less_or_equal(function__, "idx[sym1__]", idx[(sym1__ - 1)], J);
      }
      current_statement__ = 14;
      validate_non_negative_index("time", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization","time","double",
          context__.to_vec(N));
      time = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(time, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 15;
        assign(time_flat__, nil_index_list(), context__.vals_r("time"),
          "assigning variable time_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          assign(time, cons_list(index_uni(sym1__), nil_index_list()),
            time_flat__[(pos__ - 1)], "assigning variable time");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 16;
      validate_non_negative_index("density", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization","density","double",
          context__.to_vec(N));
      density = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(density, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> density_flat__;
        current_statement__ = 17;
        assign(density_flat__, nil_index_list(), context__.vals_r("density"),
          "assigning variable density_flat__");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 17;
          assign(density, cons_list(index_uni(sym1__), nil_index_list()),
            density_flat__[(pos__ - 1)], "assigning variable density");
          current_statement__ = 17;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 18;
      validate_non_negative_index("density_0", "J", J);
      current_statement__ = 19;
      validate_non_negative_index("lambda", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += J;
      num_params_r__ += J;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "exponential_growth_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 1;
      sigma = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 1;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> density_0;
      density_0 = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(density_0, DUMMY_VAR__);
      
      current_statement__ = 2;
      density_0 = in__.vector(J);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda;
      lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(lambda, DUMMY_VAR__);
      
      current_statement__ = 3;
      lambda = in__.vector(J);
      {
        current_statement__ = 4;
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 5;
        assign(mu, nil_index_list(),
          elt_multiply(
            rvalue(density_0, cons_list(index_multi(idx), nil_index_list()),
              "density_0"),
            stan::math::exp(
              elt_multiply(
                rvalue(lambda, cons_list(index_multi(idx), nil_index_list()),
                  "lambda"), time))), "assigning variable mu");
        current_statement__ = 6;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, 0.1));
        current_statement__ = 7;
        lp_accum__.add(normal_lpdf<propto__>(density_0, 0, 0.1));
        current_statement__ = 8;
        lp_accum__.add(normal_lpdf<propto__>(lambda, 0, 1));
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(density, mu, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "exponential_growth_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sigma = in__.scalar();
      current_statement__ = 1;
      sigma = stan::math::lb_constrain(sigma, 0);
      Eigen::Matrix<double, -1, 1> density_0;
      density_0 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(density_0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      density_0 = in__.vector(J);
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      lambda = in__.vector(J);
      vars__.emplace_back(sigma);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(density_0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, 1> density_0;
      density_0 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(density_0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> density_0_flat__;
        current_statement__ = 2;
        assign(density_0_flat__, nil_index_list(),
          context__.vals_r("density_0"),
          "assigning variable density_0_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 2;
          assign(density_0, cons_list(index_uni(sym1__), nil_index_list()),
            density_0_flat__[(pos__ - 1)], "assigning variable density_0");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 3;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_flat__[(pos__ - 1)], "assigning variable lambda");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      vars__.emplace_back(sigma_free__);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(density_0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("sigma");
    names__.emplace_back("density_0");
    names__.emplace_back("lambda");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "density_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "density_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"density_0\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"density_0\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

using stan_model = exponential_growth_model_namespace::exponential_growth_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


